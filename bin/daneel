#!/usr/bin/env node

const download = require('download-git-repo')
const program = require('commander')
const ora = require('ora')
const chalk = require('chalk')
const logger = require('../lib/logger')
const generate = require('../lib/generate')
// const checkVersion = require('../lib/check-version')

/**
 * Usage.
 */

program
  .usage('<template-repo>')

/**
 * Help.
 */

program.on('--help', () => {
  console.log('  Examples:')
  console.log()
  console.log(chalk.gray('    # create a new model straight from a github template'))
  console.log('    $ model2view username/repo')
  console.log()
})

/**
 * Help.
 */

function help () {
  program.parse(process.argv)
  if (program.args.length < 1) return program.help()
}
help()

/**
 * Settings.
 */

let template = program.args[0]
const clone = true

/**
 * Padding.
 */

process.on('exit', () => {
  console.log()
})

/**
 * Check, download and generate the project.
 */

function run () {
  downloadAndGenerate(template)
}

/**
 * Download a generate from a template repo.
 *
 * @param {String} template
 */

function downloadAndGenerate (template) {
  const spinner = ora('downloading template')
  spinner.start()
  download(template, './', { clone }, err => {
    spinner.stop()
    if (err) logger.fatal('Failed to download repo ' + template + ': ' + err.message.trim())
    generate('./name', './', './', err => {
      if (err) logger.fatal(err)
      console.log()
      logger.success(chalk.green('Generated successfully!'))
    })
  })
}

run()
